# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-admin-production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci -ws --include-workspace-root
      - run: npm run build -w @69doll/admin-website
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: 'admin-website-production'
          path: './admin-website/dist'

  # Single deploy job since we're just deploying
  deploy-official-production:
    environment:
      name: production
      url: ${{ steps.deployment.outputs.deployment-url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci -ws --include-workspace-root
      - name: 'Download .env file'
        env:
          data_domain: ${{ vars.VITE_API_DATA_DOMAIN }}
        if: ${{ env.data_domain != '' }}
        run: wget -O official-website/.env.production ${data_domain}/production/.env.production
      - run: npm run build -w @69doll/official-website
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: 'official-website-production'
          path: './official-website/dist'
      - name: Deploy Production to Cloudflare
        uses: cloudflare/wrangler-action@v3
        id: deployment
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy official-website/dist --project-name=${{vars.CLOUDFLARE_PROJECT_NAME}} --branch master
  deploy-official-staging:
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.deployment-url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci -ws --include-workspace-root
      - name: 'Download .env file'
        env:
          data_domain: ${{ vars.VITE_API_DATA_DOMAIN }}
        if: ${{ env.data_domain != '' }}
        run: wget -O official-website/.env.staging ${data_domain}/staging/.env.staging
      - run: npm run build  -w @69doll/official-website -- --mode staging
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: 'official-website-staging'
          path: './official-website/dist'
      - name: Deploy Staging to Cloudflare
        uses: cloudflare/wrangler-action@v3
        id: deployment
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy official-website/dist --project-name=${{vars.CLOUDFLARE_PROJECT_NAME}} --branch staging
